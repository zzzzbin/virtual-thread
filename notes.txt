### Java Threads
Thread(Platform Thread) = OS Thread
Virtual Thread
### Virtual Thread
It will look like a thread
but OS cannot see them/ schedule them
### Stack Size
Platform threads have fixed stack
Virtual Threads do NOT have fixed stack. They have resizable stack
class VirtualThread{
    Runnable task;
    VirtualStack stack;
}
### Virtual Thread Scheduler
Platform Threads are scheduled by the OS scheduler
Virtual Threads are scheduled by JVM (ForkJoinPool)
- core pool size = available processor
- Carrier threads will NOT be blocked during I/O

### Scheduling types
Preemptive: OS scheduling policy, CPU is allocated for a limited time, context switching
Cooperative: CPU is allocated till the execution is completed. If there is a long running thread/task, other thread might have to starve
How to implement Cooperative? Thread.yield

### Synchronous blocking style code
Runnable task = () -> {
  Price price = productService.getPrice(productId);
  PaymentConfirmation payment = paymentService.deductPayment(userId, price);
  ShippingConfirmation shipping = shippingService.scheduleShipping(userId, productId, quantity);
};

// Let the virtual thread execute the task
// During blocking I/O call, it will be unmounted and next task will be executed
Thread.ofVirtual().start(task);

### Synchronization
Mechanism to provide controlled access to shared resources/critical section of code in a multi-threaded env
synchronized + VT => Pinned
I/O task -> Virtual thread cannot be unmounted. Would affect scaling.

### ReentrantLock
Synchronized + flexibility
A thread which has been waiting longer will get the chance to acquire the lock
tryLock with timeout: max time for a thread to wait to acquire the lock

### Summary
Platform threads: 1 platform thread = 1 os thread, expensive to create, limited number of platform threads
Virtual threads: it extends Thread class allowing us to use thread-related methods as usual, like weight and occupy
minimal space in the heap. We can create milions of them. Very cheap to create. It does not replace platform thread.
VT is great for IO tasks. We get the "non-blocking benefits behind the scenes"
VT can not be executed directly by OS scheduler
It is mounted on Carrier thread for the execution

### ExecutorService(fixed, single, cached, scheduled): -> QUEUE
Executor is a Functional interface. ExecutorService is an interface which extends Executor
Executors is an utility class with factory methods to create an instance of ExecutorService impl
VT are NOT supposed to be pooled.
Fixed Thread Pool: A thread pool with a dedicated number of threads. Usage: A web application with 200 threads.
Single Thread Executor: Same as above. A thread pool with a single worker thread. Not configurable. Usage: To execute tasks sequentially.
Cached Thread Pool: Elastic Thread Pool. Create a new Thread on demand. Reuse existing threads if available. Idle thread lifetime is 1 min. Usage: Unpredictable workload.
Scheduled Thread Pool: Thread pool that can be used to run tasks at regular intervals. Usage: Call a remote service every minute.

### Semaphore s = new Semaphore(1) vs Lock l = new ReentrantLock();
Lock: the thread which acquired the lock is supposed to unclock!
Semaphore: any thread can release the permit!

### summary
ExecutorService with Platform Threads
    single / fixed / cached / scheduled / fork-join-pool
    These implementations pool threads
    Do NOT use Virtual Thread factory.
ExecutorService with Virtual Threads
    single / fixed → use semaphore + Queue
    cached → more or less same as thread-per-task
    scheduled → use platform thread to schedule and virtual thread to execute
    fork-join-pool → N/A









